generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("URL_SHARING_PRISMA_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  protectedUrls ProtectedUrl[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProtectedUrl {
  id            String    @id @default(cuid())
  userId        String
  originalUrl   String    @db.Text
  customSlug    String    @unique
  title         String?
  description   String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessLinks   AccessLink[]
  accessLogs    AccessLog[]
}

model AccessLink {
  id            String    @id @default(cuid())
  protectedUrlId String
  uniqueCode    String    @unique
  recipientName String?
  recipientEmail String?
  password      String
  expiresAt     DateTime?
  maxAccesses   Int?
  accessCount   Int       @default(0)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  protectedUrl  ProtectedUrl @relation(fields: [protectedUrlId], references: [id], onDelete: Cascade)
  accessLogs    AccessLog[]
}

model AccessLog {
  id            String    @id @default(cuid())
  protectedUrlId String
  accessLinkId  String?
  ipAddress     String
  userAgent     String?
  referrer      String?
  country       String?
  city          String?
  createdAt     DateTime  @default(now())

  protectedUrl  ProtectedUrl @relation(fields: [protectedUrlId], references: [id], onDelete: Cascade)
  accessLink    AccessLink?  @relation(fields: [accessLinkId], references: [id], onDelete: SetNull)
}